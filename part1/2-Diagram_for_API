# Sequence Diagrams for API Calls (HBnB Application)

This document includes four sequence diagrams representing different API calls within the HBnB application. These diagrams illustrate how the Presentation Layer (API), Business Logic Layer (Models), and Persistence Layer (Database) interact to process each request.

---

## 1. User Registration

### Purpose:
Allow a new user to sign up for an account.

### Sequence Diagram (Mermaid.js):
```mermaid
sequenceDiagram
    participant User
    participant API
    participant BusinessLogic
    participant Database

    User->>API: POST /users {email, password, name}
    API->>BusinessLogic: validate_and_create_user(data)
    BusinessLogic->>Database: INSERT INTO users
    Database-->>BusinessLogic: Success
    BusinessLogic-->>API: Return user object
    API-->>User: 201 Created + user JSON
```

---

## 2. Place Creation

### Purpose:
Allow a user to add a new place listing to the platform.

### Sequence Diagram (Mermaid.js):
```mermaid
sequenceDiagram
    participant User
    participant API
    participant BusinessLogic
    participant Database

    User->>API: POST /places {name, description, location}
    API->>BusinessLogic: create_place(user_id, data)
    BusinessLogic->>Database: INSERT INTO places
    Database-->>BusinessLogic: Success
    BusinessLogic-->>API: Return place object
    API-->>User: 201 Created + place JSON
```

---

## 3. Review Submission

### Purpose:
Let a user submit a review for a specific place.

### Sequence Diagram (Mermaid.js):
```mermaid
sequenceDiagram
    participant User
    participant API
    participant BusinessLogic
    participant Database

    User->>API: POST /places/<place_id>/reviews {rating, comment}
    API->>BusinessLogic: create_review(place_id, user_id, data)
    BusinessLogic->>Database: INSERT INTO reviews
    Database-->>BusinessLogic: Success
    BusinessLogic-->>API: Return review object
    API-->>User: 201 Created + review JSON
```

---

## 4. Fetching a List of Places

### Purpose:
Allow a user to retrieve a list of available places based on criteria.

### Sequence Diagram (Mermaid.js):
```mermaid
sequenceDiagram
    participant User
    participant API
    participant BusinessLogic
    participant Database

    User->>API: GET /places?city=Toulouse
    API->>BusinessLogic: get_places_by_city("Toulouse")
    BusinessLogic->>Database: SELECT * FROM places WHERE city='Toulouse'
    Database-->>BusinessLogic: Return place list
    BusinessLogic-->>API: Return place list JSON
    API-->>User: 200 OK + list of places
```

---

## Final Notes

- All diagrams follow the same architecture: Presentation Layer (API), Business Logic Layer (Models), Persistence Layer (Database).
- They represent realistic and clean flows from request to response.
- These diagrams help both technical and non-technical stakeholders visualize how the backend operates in response to different user actions.
